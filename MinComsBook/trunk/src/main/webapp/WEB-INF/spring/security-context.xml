<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:oauth="http://www.springframework.org/schema/security/oauth2" xmlns:sec="http://www.springframework.org/schema/security"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

	<sec:global-method-security secured-annotations="enabled"  />
	<!-- This is where we configure Spring-Security  BOOKMANAGER,-->
	<http auto-config="true"   disable-url-rewriting="true" use-expressions="true" access-denied-page="/denied"    xmlns="http://www.springframework.org/schema/security">
	
		<intercept-url pattern="/login" access="permitAll"/>
		<intercept-url pattern="/" access="permitAll"/>
		<intercept-url pattern="/admin/**/**" access="hasAnyRole('ADMIN','BOOKMANAGER')"/>
		<intercept-url pattern="/book/**" access="hasRole('WORKER')"/>
		<intercept-url pattern="/user/signin" access="permitAll"/>
		<intercept-url pattern="/user/**" access="permitAll"/>
		<intercept-url pattern="/crossdomain.xml" access="permitAll"/>
		
		
			
		<form-login 
				login-page="/login"
				login-processing-url="/signin/authenticate" 				
				authentication-success-handler-ref="loginSuccessHandler"
				authentication-failure-handler-ref="loginFailureHandler" 
				default-target-url="/"
						
				/><!--  default-target-url="/"--> 
		
		<logout 
				invalidate-session="true" 
				logout-success-url="/login" 			
				logout-url="/logout" />
		
		<!-- 리멤버미 인증 서비스 임시 막음 loginSuccessHandler 사용-->
		<remember-me key="itsplace" data-source-ref="dataSource"  authentication-success-handler-ref="loginSuccessHandler"/>		
	
	</http>
	
	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<authentication-manager  xmlns="http://www.springframework.org/schema/security">
	        <authentication-provider user-service-ref="bookUserDetailsService">
	        		<password-encoder ref="passwordEncoder"/>
	        </authentication-provider>
	</authentication-manager>

	<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
	<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>
	<!-- A custom service where Spring will retrieve users and their corresponding access levels  -->
    <bean id="bookUserDetailsService" class="com.mincoms.book.security.BookUserDetailsService" autowire="byType"   />			

	<bean id="rememberAuthSuccesHandler" class="com.mincoms.book.security.RememberAuthSuccessHandler" />
	
	<bean id="loginSuccessHandler" class="com.mincoms.book.security.LoginSuccessHandler" />
	<bean id="loginFailureHandler" class="com.mincoms.book.security.LoginFailureHandler" />
	
	
	<!-- oauth2
	<http  pattern="/oauth/token" create-session="never" authentication-manager-ref="clientAuthenticationManager" 
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic />
		
		<custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
	</http>
	
	<bean id="clientCredentialsTokenEndpointFilter" class="com.itsplace.oauth2.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>
	<authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>


	

	<bean id="clientDetailsUserService" class="com.itsplace.oauth2.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>

	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.RandomValueTokenServices">
		<property name="tokenStore">
			<bean class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />
		</property>
		<property name="supportRefreshToken" value="true" />
	</bean>

	<oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter" resource-id="sparklr" token-services-ref="tokenServices" />

	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="my-trusted-client" authorized-grant-types="password,authorization_code,refresh_token,implicit"
			authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" scope="read,write,trust" />
		<oauth:client client-id="my-trusted-client-with-secret" authorized-grant-types="password,authorization_code,refresh_token,implicit"
			secret="somesecret" authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" />
		<oauth:client client-id="my-less-trusted-client" authorized-grant-types="authorization_code,implicit"
			authorities="ROLE_CLIENT" />
		<oauth:client client-id="my-client-with-registered-redirect" authorized-grant-types="authorization_code,client_credentials"
			authorities="ROLE_CLIENT" redirect-uri="http://anywhere" scope="trust" />
		<oauth:client client-id="my-untrusted-client-with-registered-redirect" authorized-grant-types="authorization_code"
			authorities="ROLE_CLIENT" redirect-uri="http://anywhere" scope="read" />
		<oauth:client client-id="tonr" resource-ids="sparklr" authorized-grant-types="authorization_code"
			authorities="ROLE_CLIENT" scope="read,write" secret="secret" />
	</oauth:client-details-service>


	<sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
		<sec:expression-handler ref="oauthExpressionHandler" />
	</sec:global-method-security>

	<oauth:expression-handler id="oauthExpressionHandler" />
	-->
</beans>
