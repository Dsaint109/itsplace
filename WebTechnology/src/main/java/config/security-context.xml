<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2" xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

	<!-- This is where we configure Spring-Security  -->
	<http auto-config="true" use-expressions="true" access-denied-page="/denied"    xmlns="http://www.springframework.org/schema/security">
	 

		<intercept-url pattern="/user/login" access="permitAll"/>
		<intercept-url pattern="/" access="permitAll"/>
		<intercept-url pattern="*" access="hasRole('ROLE_USER')"/>
	
	</http>
	
	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<authentication-manager  xmlns="http://www.springframework.org/schema/security">
	
	</authentication-manager>

	<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
	<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>
	<!-- A custom service where Spring will retrieve users and their corresponding access levels  -->
  
</beans>
